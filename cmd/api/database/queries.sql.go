// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createJob = `-- name: CreateJob :exec
INSERT INTO jobs (
  company, title, description, location, salary, role, remote
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, company, title, description, location, salary, role, remote, created_at, updated_at, deleted_at
`

type CreateJobParams struct {
	Company     string
	Title       string
	Description string
	Location    string
	Salary      float64
	Role        string
	Remote      bool
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) error {
	_, err := q.db.ExecContext(ctx, createJob,
		arg.Company,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.Salary,
		arg.Role,
		arg.Remote,
	)
	return err
}

const deleteJob = `-- name: DeleteJob :exec
UPDATE jobs SET deleted_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteJob, id)
	return err
}

const getJob = `-- name: GetJob :one
SELECT id, company, title, description, location, salary, role, remote, created_at, updated_at, deleted_at FROM jobs WHERE id = $1
`

func (q *Queries) GetJob(ctx context.Context, id uuid.UUID) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Company,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.Salary,
		&i.Role,
		&i.Remote,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getJobs = `-- name: GetJobs :many
SELECT id, company, title, description, location, salary, role, remote, created_at, updated_at, deleted_at FROM jobs ORDER BY created_at DESC
`

func (q *Queries) GetJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, getJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Company,
			&i.Title,
			&i.Description,
			&i.Location,
			&i.Salary,
			&i.Role,
			&i.Remote,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
UPDATE jobs 
  SET company = $2, 
  title = $3,
  description = $4, 
  location = $5,
  salary = $6,
  role = $7,
  remote = $8, 
  updated_at = NOW() WHERE id = $1 RETURNING id, company, title, description, location, salary, role, remote, created_at, updated_at, deleted_at
`

type UpdateJobParams struct {
	ID          uuid.UUID
	Company     string
	Title       string
	Description string
	Location    string
	Salary      float64
	Role        string
	Remote      bool
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.ExecContext(ctx, updateJob,
		arg.ID,
		arg.Company,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.Salary,
		arg.Role,
		arg.Remote,
	)
	return err
}
